$object-name: 'type';

$colors: ()!default;
$font-families: ()!default;
$font-weights: ()!default;
$breakpoints: ()!default;
$type-underline-color: $color-default;

.#{$object-name} {
  font-style: normal;
  font-stretch: normal;

  @each $color-name, $color in $colors {
    &--color-#{$color-name} {
      color: $color;
    }
  }

  @each $font-family-name, $font-family in $font-families {
    &--family-#{$font-family-name} {
      font-family: $font-family !important;
    }
  }

  @each $font-weight in $font-weights {
    &--weight-#{$font-weight} {
      font-weight: $font-weight;
    }
  }

  @each $type-style-name, $type-style in $type-styles {
    &--#{$type-style-name} {
      @each $breakpointKey, $breakpoint in $breakpoints {
        $type-style-breakpoints: map_get($type-style, breakpoints);

        @if $breakpointKey == 0 {
          $type-default-styles: map_get($type-style-breakpoints, 0);
          font-family: map_get($type-style, font);
          @include type(map_get($type-default-styles, sz), map_get($type-default-styles, ls), map_get($type-default-styles, lh), map_get($type-default-styles, fw));
        }
        @else {
          @if map_get($type-style-breakpoints, $breakpointKey) {
            @include respond-to($breakpointKey) {
              $type-current-breakpoint-styles: map_get($type-style-breakpoints, $breakpointKey);
              @include type(map_get($type-current-breakpoint-styles, sz), map_get($type-current-breakpoint-styles, ls), map_get($type-current-breakpoint-styles, lh), map_get($type-current-breakpoint-styles, fw));
            }
          }
        }
      }
    }
  }

  &--inherit {
    font-size: inherit !important;
    line-height: inherit !important;
    letter-spacing: inherit !important;
    font-weight: inherit !important;
    color: inherit !important;

    @include respond-to(sm) {
      font-size: inherit !important;
      line-height: inherit !important;
      letter-spacing: inherit !important;
      font-weight: inherit !important;
      color: inherit !important;
    }

    @include respond-to(md) {
      font-size: inherit !important;
      line-height: inherit !important;
      letter-spacing: inherit !important;
      font-weight: inherit !important;
      color: inherit !important;
    }
  }

  &--caps {
    text-transform: uppercase;
  }

  &--no-caps {
    text-transform: none;
  }

  &--right {
    text-align: right;
  }

  &--left {
    text-align: left;
  }

  &--centered {
    text-align: center;
  }

  &--one-line {
    white-space: nowrap;
  }

  &--hyphened {
    hyphens: auto;
  }

  &--italic {
    font-style: italic;
  }

  &--underlined {
    text-decoration: underline;
    text-decoration-color: $type-underline-color;
  }
}
